Functions

  A procedure is defined as a sequence of instructions having a defined set of entry and exit points and the ability to be "called" by other instructions. When such a "call" occurs, the execution of the procedure beings at one of the defined entry points and continues, following the otherwise defined semantics of the language, until it reaches and executes one of the defined exit points. At this point control returns back to the instruction after the call which initiated procedure evaluation, in accordance with the semantics of the exit point (NOTE: This should be taken primarily to allow for tail recursion and other runtime optimizations).

  Procedures may also define a list of accepted arguments, specifying any type constraints that call-sites must satisfy and the names by which the values are bound within the procedure's local scope. The arguments to a procedure are first evaluated in a left-right order before the code jumps into the procedure's instruction stream (the exact mechanism for how arguments get passed is the standard mechanism for the target triple). (NOTE: The "callable" is always evaluated before the arguments)

  A function is considered as a specialization of a procedure having a single entry point and where every exit point takes the form of a return statement. Partly as a by-product, functions are not allowed to re-entrant (ie. it is not possible to evaluate half the function, return to the calling code for sometime, and then restart the function midway through with no issues). If a statement as written occupies an exit point (ie. is the last evaluated expression in the function on a specific control path), it is automatically considered to also be a return statement, by dint of its logical position (NOTE: It is possible to explicitly mark a statement as a return statement).

  A method may be considered as a specialization of a function for OOP contexts, indicating that the specific function is a "member" of the surrounding type. All methods, unless otherwise marked as "static", have an implicit "self" variable of "Self" types (where 'Self' is the encapsulating type [ie. the type that is being defined]) introduced into their context and scope, serving to unify the instance and type members with normal evaluation rules (NOTE: IT is undecided how the self object will be transfered over into the method's context). Inside of a method, variable lookup first seeks to access the type's scope for a definition before it considers the global (or any "parent" scopes) (NOTE: Local scopes are considered before type scopes).

  A coroutine is considered as a specialization of a procedure where control can be explicitly yielded to (and re-acquired from) the calling code (ie. it is re-entrant). This is befored through the 'yield' and 'wait' statements. (TODO: Work on what coroutines mean)

  A lambda is a syntactical shortcut for producing functions that implicitly populates the argument tuple (and all other necessities) as inferred by analyzing the body usage. A lambda value is indicated through the existence of a '_' symbol within a statement where a value would otherwise be expected (NOTE: This does not apply in cases where '_' has an existing interpretation [ie. match, for, use, ...]). The lambda's body is then taken as the maximal statement that immediately relies on the usage of that lambda value, coalescing if multiple lambda values are used in a single statement (NOTE: I'm considering having this coalescense "end" at a "storage" site (ie. an assignment, return, argument). Otherwise, I don't know where this procedure would end).

Function Overloading

  Spero supports the capability of defining multiple functions and having them bound to a single name, ie. "Function overloading". Overloads are produced by binding a function of any type to a name that was previously bound to a function (or set of functions) within the current lexical scope. If the assignment occurs in a different lexical scope, then normal scope shadowing rules instead apply and the previous definitions are hidden.

  When an overloaded function is called, the correct function is picked out of all possible definitions through a process called "overload resolution". Overload resolution tries to determine the the best match from the call site usage to the defined accepted relations, taking into account argument types and values and the usage of the return value (NOTE: Functions can be overloaded based on their return type). The process of overload resolution must be unambiguous in regards to the order in which functions are declared and defined (ie. resolution must find 1 and only 1 match). If more than one possible match is found, a compiler error must be produced.

  Overload resolution is

  TODO: The specific rules for deciding overload resolution are laid out as follows:

  Overload Resolution
    5 modes of overload matching: Exact, Polymorphic, Generic, Implicit, None
      Exact       <- Exact type match, 'Arg == Param'
        Note: Var-arg matches are considered to be at the "exact" level
      Polymoprhic <- Subtype relationship, 'Arg :: Param'
      Generic     <- Generic matching, '[Param]'
      None        <- Failure state
      Implicit    <- Construct from the arg, 'Param:new(Arg)'
        Only one level of non-explicit constructors are considered for Implicit matching
        Experimental: The entire argument set may be considered for overloads with only 1 parameter
      Note: These are given in the rank order used by the resolution algorithm

    TODO: Go over this entire resolution process and reword it
    The resolution process goes similarly to this
      Choose all functions of name f into the overload set
        If there are any arguments, add a small weight to all functions T:f where T = type(f.params[0])
      From the overload set, choose all functions, f, so that
        The match on f.return is no worse than any other overload	# NOTE: What if I or'd these
        The worst match on f.params is no worse than the match on any other overload
      If more than one such function exists in the overload set, reduce as follows
	f is a member function (ie. has the 'T:f' weight)
        The mutability match on f.params is no worse than any other overload
      A dispatch (overload resolution) error will occur if one of the following applies
	No function was selected by the overload process (no overload exists)
	2 or more functions were selected by the overload process (multiple overloads exist)

  Spero provides the capability to "forward" arguments to function calls through the usage of "dot-forwarding" (NOTE: See 'Function Calling' for more info). It is of course possible to define a function by utilizing this dot-forwarding syntax without providing any "anchoring" arguments on the left hand of the '.'. The overload set of these forwarded functions shall be taken as the maximal overload set that makes the body of the function, typeable. It is possible to drop the argument tuple (and '->') from the function definition if the overload set does not needs further constraining (NOTE: Argument names may still be dropped in this case). Evalation of these functions shall proceed as if the parameter tuple was pasted into the code space directly before the forwarding dot and in accordance with normal dot-forwarding semantics (NOTE: The forwarded function must be a callable object).

Operator Overloading

  Operators in Spero are little more than a syntactical wrapping of functions, aimed at providing a degree of tranferrance onto program development. An operator is considered to be any function whose name is entirely comprised of symbols and is not a predefined language construct (NOTE: By symbols, we are referring to non-alphanumeric characters) (NOTE: The set of unary operators is finite and defined by this standard, the set of binary operators is not bound). When an operator is encountered, the Spero compiler searches for a matching definition according to the types of the two operands and rewrites the given program as if the operator was replaced with a call to the chosen function, using any operands as the arguments in a strict left->right odering (ie. <a> + <b> gets transformed into <?.>+(<a>, <b>)).

  An unary operator can be defined for a type `T` by providing a method of type `mut? () -> U` or a function of type `(T) -> U`, for any given type `U`. A binary operator can be defined for types `T` and `U` by providing a method of type `mut? (U) -> V` or a function of type `(T, U) -> V`, for any given type `V` and permutation of the types (NOTE: Currently, spero operators are order sensitive [ie. 3 + "h" != "h" + 3]).

  The process for operator precedence is defined in terms of the first symbol within the operator "string" (ie. the set of symbols that composes the operator). (TODO: Define that precedence).

Function Calling

  Arguments may be passed to the procedure body if the definition declares them as supported. These arguments are bound to the scope of the procedure body before any other statements in the procedure are executed. If the procedure is defined entirely using dot-forwarding, it is not necessary for these arguments to have an associated name, rather an accepted type (as they are immediately forwarded into the function body, without binding).

  If a function is invoked with fewer than expected number of parameters, then a function "closure" is returned, accepting the remaining arguments and forwarding them on to the original call. A function creates this partial application closure iff; 1) overload resoltion fails due to running out of parameters, 2) a valid function could exist given the existing parameters, and 3) the resulting object is stored and used (ie. as a variable/argument/return value). The created closure shares the same overload set as the intial function, minus all overloads that are made invalid by the bound arguments (NOTE: Partial closures are themselves functions, and can thus create closures themselves). Since operators are themselves functions, they can also be partially applied to their arguments, albeit with different semantics depending on which "side" of the operator the bound argument lies at (NOTE: As a syntactical shortcoming, 'rhs' binding currently works through lambda declaration, ie. `.+ 2`).

  A very particular point of Spero's syntax is the ability to invoke functions through the usage of "dot-flipping", calling them as-if they were a member of the "calling" type. Using dot-flipping implicitly inserts the immediately preceding atom as the first argument within the passed arg-tuple, calling the "flipped" function as-if the new tuple was passed as the arguments (ie. `t.fn(...)` === `fn(t, ...)`) (NOTE: `n - 1.factorial()` === `n - {1.factorial()}`, not `{n - 1}.factorial()`). Methods are implicitly impemented in terms of this facility (NOTE: One possible implementation is to follow the C++ model, where the `self` parameter is an implicit first argument to the function), so function lookup, by necessity, must prioritize methods over "free" functions. Dot-flipping also extends to operators (as they are just functions), serving to elevate the "priorty" to that of a function call.

  Function are eagerly evaluated: that is all their arguments are evaluated before the function is called and the is called in it's entirety when invoked (NOTE: If a function is determined to have no effect on program evaluation, it is allowable for a compiler to eliminate the call). Spero supports the necessary semantics to mimic lazy evaluation (through streams/generators/captures/etc.).

Object interaction

  Non-static member functions (ie. functions declared within the context of a type body) automatically have an implicit "self :: Self&" first parameter inserted into the body. If the function is marked as "mut" (through attaching `mut` before the argument tuple), then the typing of the `self` parameter changes to `mut Self&`, thereby allowing the oject to be mutably altered. An additional 'super' keyword is defined that serves to force selection of inherited definitions in the child type (especially when the child overrides the implementation).

  Member functions are generally called through indexing from an instance of the declaring type. This process largely takes advantage of function forwarding to send the type instance object to the method body (as required by spero semantics for methods).

  Static methods are all methods declared within a type body that have the '@static' annotation applied to them. These methods perform exactly like free functions except that they are implicitly "namespaced" into the context of the surrounding class, as if they were placed in a module of the same name. Static methods are called/accessed through their qualified name, as if the surrounding type was the declaring namespace (NOTE: It is possible to import static methods into the current scope through the 'use' statement).

  Variable resolution will implicitly attempt to index into this parameter if lookup fails to find a definition in the immediate scope (but before the global/higher context). It is always possible to explicitly index into the 'self'/'super' keyword and access the variable definitions if needed, although it will be an indexing error if such a definition doesn't exist. Note that 'self' and 'super' are keywords and cannot be shadowed so there is no ambiguity about what the behavior of this statement should be (NOTE: It is not possible to declare and define new variables as "members" of `self` or `super`).

Coroutines


// End of narration, start of notes
Function Calling
  Omitting Parentheses: (Might have dropped this part)
    Parentheses can be omitted when a no-arg function is called
      Except in the case of constructing types (due to metaprogramming considerations)
      Renaming a no-arg function presents a bit of a syntactical challenge:
    Parentheses cannot be ommitted to perform default type construction
      This is to allow for nicer metaprogramming syntax
        ie. "Int" refers to the `Int` type object and not a default `Int` value (ie. "Int() => 0")

  Var-arg functions
    If a function's final argument has a view typing, it is "var-arg" parameter
      The function will accept 0+ T's being passed at the end
        This T's will be grouped into a Sequence[T] container/view (ie. 'Array[T, n]')

Coroutines

Experimental Ideas:
  Define '+' for functions, so "f + g" creates a function 'h', "h(...) = f(...) + g(...)"
  If the "caller" is a n-ary tuple, tuple application applies (for dot-flipping)
  Partial application can be disabled with the `@disable(curry)` annotation

TODO:
  Add in better language for partial application resolution
  Improve wording and understanding of var-arg recognition in overload resolution
  Add in language to account for 'mutable' methods
