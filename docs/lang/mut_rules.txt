Mutability Rules
    Within Spero there is a strong focus on reducing unexpected/undesired behavior
        To is largely performed by simply making values default to an immutable state,
        Where their internal state cannot change. Values can be made mutable with the
        'mut' keyword, produced a typed state that allow for internal mutation. The
        rules regarding switching between these two states are very important to the
        safety of the language, especially considering pointers and references. This
        sheet lays out the rules the compiler should follow in the given situations.

    Assignment (any statement of the form "let t = v", where t and v may be the same name)
        change,       name, ptr/ref, num refs    -> action
        mut->mut,     same, _,       _           -> delete, warn
        mut->mut,     diff, ptr,     _           -> error
        mut->mut,     diff, ref,     _           -> alias (num_refs+1)
        mut->mut,     diff, na,      _           -> copy
        mut->const,   same, ptr,     >1          -> error
        mut->const,   same, ref,     >1          -> error
        mut->const,   same, _,       _           -> change mutability
        mut->const,   diff, na,      _           -> copy
        mut->const,   diff, _,       _           -> error
        const->mut,   same, ptr,     1           -> change mutability
        const->mut,   same, na,      1           -> change mutability
        const->mut,   same, na,      _           -> copy, de-alias (num_refs-1)
        const->mut,   same, _,       _           -> error
        const->mut,   diff, na,      _           -> copy
        const->mut,   diff, _,       _           -> error
        const->const, same, _,       _           -> delete, warn
        const->const, diff, ptr,     _           -> copy  (num_refs+1)
        const->const, diff, ref,     _           -> alias (num_refs+1)
        const->const, diff, na,      _           -> alias (num_refs+1)

    Tuple Deconstruction (in 'let' or 'match' statements)
        Tuples follow the simple rule of decomposition into the sum of their members
        If any part results in an error, then the entire tuple is in error
            Otherwise, the members follow their own rules for binding

    Pattern Deconstruction (match, for, etc.)
        change,       ptr,   capture    -> action
        mut->mut,     na,    nom        -> copy
        mut->mut,     ptr,   nom        -> borrow
        mut->const,   na,    nom        -> alias (num_refs+1)
        mut->const,   ptr,   nom        -> borrow
        const->mut,   na,    nom        -> copy
        const->mut,   ptr,   nom        -> error
        const->const, na,    nom        -> alias (num_refs+1)
        const->const, ptr,   nom        -> copy  (num_refs+1)
        const->mut,   na,    ref        -> error
        _->_,         na,    ref        -> reference
        _->_,         ptr,   ref        -> error
        
        NOTE: It's not possible (currently) to store references in a type.

TODO:
    Expand 'Mut Rules' to encompense values (ie. temporaries) as well
        This is really just an extension of Assignment rules (Assignment can be subsumed by the new set)
        I think values will be a bit trickier to fully reason about in all cases
          But it's necessary to allow for 'inline mut'
    Add in rule-set for determining function overloads in regards to mut changes and ptr-ref distinction
        Forbidding these clashes is also an option to consider