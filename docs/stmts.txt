# This file is a collection of all statements and expressions in Spero
Statements
  A spero source file consists of a sequence of 0 or more high-level statements
    Spero semantics make a further distinction of "value expressions"
      A "value expression" is any statement that produces a usable value

  Statement-deliniation
    Spero statements are parsing-delineated by default
      The parser will match a statement as long as the rule matches
    
    Generally, whitespace is all that's needed to have correct behavior
      A ';' may be used to force a split where this option is not enough
        Note: Should only be used to fix parsing errors/improve readibility

  Order of Evaluation can be forced by wrapping sub-expressions in '{}'
    '()' are treated as tuples and the current semantics don't match what's needed
    TODO: Look into this area, '()' is just too entrenched
    Note: '{}' allows multiple statements to be included inside of it

Assignment
  Grammar:
    <context> <name_ptn><gen> (<interfce>|<asgn_val>)
    interfce -> <sig> (= <type_body>|<valexpr>)?
    asgn_val -> = <type_body>|<valexpr> (in <valexpr>)?
    context  -> let | def | static

  Context Keyword:
    Spero takes a different approach to many languages in specifying visibility
      TODO: What/why?
    This keyword specifies the visibility of the following binding
      let/def/static maps to the traditional protected/public/static visibilities
        TODO: Explain the rules for these. Need a better understanding of all times
    Note: Currently this keyword has no consistent effect outside of type/module decs
      This is largely since you can't "index" local scopes anyways
    'def' exports the binding into the context's public interface
    'let' creates a binding within the context's local interface (ie. protected)
       Note: The local context can still access members of the public interface
    'static' exports the binding into the context's static interface
       TODO: Define what this means
       Note: There's no current way put static bindings into the local interface

  Signature (:: T)
    This specifies the minimum interface any acceptable value must satisfy
      Note: I may end up adding a special behavior for Functions in this respect
    For types, this syntax is one way of specifying an inheritance relationship

  Generics ([T]):
    Parametric polymorphism for types and variables is introduced with '[T]' syntax
      Note: '[T]' must be attached to the binding on the lhs of the assignment
    Note: See "Generic Variables" for more

  Assignment works by binding an value expression to a known name
    For types, this must be the type body, a block of code ('{..}')
      Note: 'mut {..}' defines a mutable-only type
    For variables, this must be a value expression
      Specifically, the value that the expression evaluates to
        Note: The compiler is free to reorganize/be lazy regarding valexprs
    It is permissible to not provide a value in certain cases to create an interface
      In this case, a type signature must be provided instead
        This simplifies the process for defining abstract types
          Note: You can't instantiate an abstract type, but you can accept one
      A definition that conforms to the interface can be provided at a later time
        If an interface is left unfilled, the implementing type is also abstract
    Bindings can be "shadowed" to hold a different value by re-assigning with the same name
      If the old value is a Type, the new value must be a specialization of the Type
        TODO: Work on the behavior of the type system in this case
      If the old value is a Type, the new value must also be a Type or an error is produced
        Note: This allows for specializing Tyes
      If the old value is a Function, the new value must be a Function iff:
        The binding is declared in a file/type context
        An overload set for that binding already exists in the local context
      If the binding is in the exact scope and is not aliased, the old value is dropped
        Shadowing can serve to switch mutability, in which case dropping does not occur
      A compiler warning is produced if members (or self/super) are shadowed in type methods

  Pattern Matching (for loop and match statement)
    Tuple Decomposition
      Tuple values can be extracted into individual variables by providing a tuple of equal arity
      NOTE: This decomposition process is recursive
    Mut keyword Placement
      The 'mut' keyword is placed within the pattern, next to the "mutable" variables
        TODO: This is a departure from normal usage why
      If placed before a tuple/ADT, all extracted variables are considered to be "mutable"
    Reference taking
      Values can also be captured by reference using the '&' character
        This symbol must be placed before the variable (same as 'mut')
      Special mutability rules apply to prevent this from abusing some Spero restrictions
    Assignment can be viewed as a restricted form of the pattern matching syntax
      Adds ADT decomposition and value matching (tuple decomposition is in assignment however)
      The 'mut' keyword is always on the value side of the statement, not by the name
    Matching Abilities
      It is possible to match a value on type, value, and if-true
        type - "<var> :: T"
        value - "<val>"
        if-true - "<var> if <cond>"
    Pattern matches within a "match" statement must be preceded by the "case" keyword

  Scoped bindings (ie. 'in' statements)
    It is possible to bind a variable for a single statement using 'in' bindings
    Following the name, add an "in <expr>" after an assignment statement
      The bound variable will then only be bound within the context of the in expr
      Note: In-bindings aren't recursive at the moment, do to the organization of grammar rules

Control Flow Expressions
  If-Elsif-Else
    if <test> do? <expr> (elsif <test> do? <expr>)* (else <expr>)?
    do? <expr> .if <test> (elsif <test> do? <expr>)* (else <expr>)?

  Loop
    loop <expr>
    <expr> .loop

    Performs an infinite loop (until a break/return is hit)
      Note: A good way of implementing an infinite generator "loop yield <expr>"

  While
    while <test> do? <expr>
    do? <expr> .while <test>

    TODO: Figure out how to have 'do-while' semantics
    Compiler will produce a warning if the expression will always be true or false
      Warning for true because 'loop' performs the same functionality

  For
    for <pattern> in <genexpr> do? <expr>
    do? <expr> .for <pattern> in <genexpr>

    Genexpr can accept values of three kinds: Iterable[T], Iterator[T], Generators
      A generator is tentatively any function that contains a reachable yield
        Note: This might be generalized in the future
        Note: I might make generators re0entrant ala Lua instead
      The types can be translated according to the following patterns
        Iterable[T]: "for <pattern> in <iterable> <expr>" => "for <pattern> in <iterable>.iter <expr>"
        Iterator[T]: "for <pattern> in <iterator> <expr>"
          "let iter = mut <iterator>      # Force the iterator to be mutable
          match iter.next {
            <pattern> -> { <expr> }
          }.while iter.hasNext"
        Generator: "for <pattern> in <generator>(..) <expr>" =>
          "match wait <generator>(..) {		# Wouldn't this re-start the function ???
            None -> break;
            Some(<pattern>) -> { <expr> }
          }.loop"
      The compiler can extend the pattern with throwaways ('_') to satisfy type-checking

  Jump Exprs:
    Spero provides several forms of controlled gotos, following common beahavior
      break, continue, return, yield, wait

    Each keyword can be followed by a single expression
      This expression serves as the jumps "value" where required by evaluation

    TODO: Figure out how corountines can be implemented
    Note: All of this is experimental atm
    The yield and wait keywords perform coroutine control flow handling
      yield creates a "resumable" return from a function
        Experimental: The function can only be resumed through a 'wait' call
	  A regular call converts the yield into a return statement
      wait wraps the coroutine call into an Option[T]
        A regular return corresponds to a None value
        A yield return corresponds to a Some value

  A 'do' keyword can proceed any statement in the language
    It has no effect on code generation or parsing and exists solely for readibility purposes

Scope
  Grammar:
    { <stmt>+ }

  Scopes make it easy to perform RAII management of resources and keep module namespaces free of clutter
    The value of the final statement executed in the scope is considered as the value of the scope
      NOTE: Indexing a scope is therefore equivalent to indexing the returned value

Tuples
  Tuples are a simple collection of values of any number of types

  Grammar:
    \(list<valexpr>\)

  Indexing:
    n-arry tuples can be indexed with '.<i>' syntax where 'i' is a Size literal < n
      This is performed at compile-time through compiler intrinsics
      Note: '(<i>)' syntax does not perform indexing for tuples

Ranges
  Grammar:
    <index>..<index>?

  TODO: Expand on this
  Ranges cover all values between start and stop ("[)")
    Infinite ranges are creatable by not providing a stop value
      TODO: Remember whether this is whitespace marked or not

Module Declaration
  Grammar:
    mod list<var, ':'>

  A module declaration is a single high-level statement (similar to Java packages)
    All following code is considered to be part of the module's scope
    The module scope ends when the file ends or at another module declaration
      Submodules are defined through ':' chains, with the parent module on the left
    Modules are always public (forced, 'mod' takes the place of visibility context)

  Experimental: The entrypoint file (where main is defined) is not required to declare a module
    Note: Java/Scala uses a "default" module where one isn't given, I think

Module Import
  Grammar:
    use module_path (binding|\{list<binding>\}|_) (:_)?
    binding -> (<var> (as <var>)?)|(<type> (as <type>)?)
 
  Importing levels the specified bindings into the context of the current context
    Basically removes the requirement to use part of the qualified name to reference the binding
      Note: This does not "include" the imports so that any code automatically has the same modules
    A '_' imports everything declared within the module up to that entrypoint
      ie. "use std:_" changes "std:io:println" -> "io:println" and "std:foo" -> "foo"
    '_:_' performs a recursive "import all" into the current context
      This removes the need to use the full-qualified name to reference all items within that module or any submodule
    Note: Imported bindings can still be accessed through their full, qualified name

  Imports can be "rebound" to different names using 'as' syntax
    The right-hand side binding is interpreted as left-hand side (ie. typedef)
      lhs can include generic instantiation information if desired (ie. "use Vec[Int] as IVec"
      Note: Can I expand this to allow for interface restrictions/rhs generics
        ie. "use Array[T :: Comparable] as Sortable[T]"
    Note: 'as' is not a full keyword. You can name bindings as 'as' just fine
      ie. "use std:wtf:as as why_not" is a valid import/binding
    Importing only associates the rhs to the qualified lhs name
      Note: You still have to use the full qualified name if using the lhs
        ie. "use std:Vec as Vector", can write "std:Vec" or "Vector"
  
  Importing follows the same rules as regular bindings (shadowing/errors/etc.)
