What do I need?
  1. A way to mark and use a section of memory for implementation
     Select and reserve a 'n byte' sized chunk of memory
     Allow typesafe modifications to those 'n bytes'
  2. (Opt) A way to enable reference semantics in function calls
  3. (Opt) A way to use specific sections of memory for implementaion
  4. An easy way of typing a sequence of elements
  5. (Opt) A way of maintaining typing on a sequence of elements of diverse typing (without relying on 'Any')

Current Framework Idea:
  Addr - Type to represent an address in memory.
  Chunk - Type to represent a section of memory. Little more than a (Addr, Size, Bool) tuple. Must be mutable?
  alloc - Function to allocate a chunk of 'n bytes'. Returns a Chunk
  alloc[T] - Function to simplify allocating a known type. defined as "alloc(T.size * n)"

  malloc - Function to allocate and initialize a single element. 