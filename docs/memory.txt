Memory Allocation:
  Spero stack-allocates all values by default, unless otherwise specified or directed
    Optimizations may be allowed to allocate otherwise (unsafe though)
    Note: This includes custom defined types

Views:
  Views are indicated by appending two dots after a type's name (ie. 'T..')
    Views are not the same as variadics though they use the same syntax
      A variadic tuple can have sequences of values from any type
      Views can only accept values that are subtypes of the declared type

  Views act as a form of syntactic sugar for a variable-length sequence of values
    On a typing level, a 'T..' is just a simpler way to say 'Iterable[T]'
      This simplifies the ability of functions to accept sequences of many types
  
  Views take on a special-semantical value when used as a function's last parameter
    This placing allows the function to accept a var-arg sequence of values
      ie. "foo(Int..)" -> "foo(1, 2, 3, 4)" and "foo(1, 2, 3)" and "foo"
    TODO: Figure out how this is to be implemented
      I could have var-arg views converted into a container, but that may be inefficient

References:
  Spero adapts C++ references to enable call-by-reference function semantics
  This is primarily important for implementing OOP methods, especially mutable type-checking
    Member methods take a 'T&' by default - Mutable members take a 'mut T&'
  References can also double as a way to reduce memory usage/copies
    One optimization is to change 'T' parameters to 'T&' if possible

Current Framework Idea:
  TypeTraits - Provides memory/allocation information/methods for programmer use
    align - the ABI alignment multipler. every valid address of T must be a multiple
    alignof - basically wraps to returning align. Not static
    size - the number of bytes that the type takes up
    sizeof - basically wraps to returning size. Not static
      Note: It might be better to have these as "free-functions" (from a size standpoint)
    Note: I'm not sure on the implementation of this
      Either a defined generic type that the compiler can fill in the information for
      Or a abstract type that every type implicitly inherits from (compiler writes the defs)
  Addr - Represents an address in memory. Addr's must be explicitly created
  Chunk - Represents a section of memory. Basically a "mut (Addr,Size,Bool)"
    apply - Create a sub-chunk with the given offset. Optional 'size'/'end' argument?
      Note: This enables '()' semantics for the "Chunk.view_as" model. Unsure?
    drop - Deallocate a Chunk (mark as free) and prevent future usage of the instance
      Note: This does not zero-initialize the memory segments
      Note: This does not call destructors (no conception of underlying types)
    for_each[T] - Iterate over each 'T' in the 'Chunk' (as if a 'T..')
      Note: Is there a way to enable 'for_each(fn)' and 'map!(fn)' with one def (into_iter?)
    forget - Prevent drop from deallocating the chunk memory segment
    view_as[T] - Reinterpret the Chunk as an 'Element[T]' object. Optional offset arg.
    Note: Chunk is a mutable-only type
  Element[T] - Type to represent a single 'T' in memory. Intermediary type between a 'Chunk' and a 'T'
    construct - Construct a 'T' in place using the given the argument list
    destroy - Call the destructor for 'T' on the memory segment
    get - Interpret the memory segment as a raw instance of 'T'
    set - Set the memory segment to the byte order for the given value of 'T'
    Note: 'Element[T]' does not implement 'drop' (ould interfere with 'Chunk' operation)
  Ptr[T] - Represents a movable pointer. Typed as 'T mut*' or 'mut T mut*'
    TODO: Determine reassignment functions for RPtr[T]
    Note: Ptr[T] implements SPtr[T]. Adds all reassignment methods
  SPtr[T] - Represents a non-movable (static) pointer. Typed as 'T*' or 'mut T*'
    borrow - Temporarily borrows the pointer for use in other computations
      Note: Prevents using the pointer until the borrow is released
      Note: This is a mutable method
    copy - Copy the pointer (not the data <- Huh?)
    deref - Return the pointer data. Special method for when a 'T'/'T&' is expected
    drop - Destroy and deallocate the pointer if last reference, or release the borrow
  alloc - Allocate a chunk of 'n' bytes. Returns a Chunk
  alloc[T] - Helper function for allocating a known type (= "alloc(T.size * n)")
  calloc[T] - Allocate and initialize a single element
\r  malloc[T] - Allocate and return a 'T mut*' (Ptr[T])
  salloc[T] - Allocate and return a 'T*' (SPtr[T])
  reserve - Mark addresses as off limits for allocation
    Note: This could be moved as a member of Addr. Semantics not needed however

Rust std::mem
  replace         - replace the memory with a new value, returning the old one
  forget          - like Chunk:forget, but more general (Stack values, et al)
  swap
    memswap(Addr, Addr, Size)
  transmute       - reinterprets value of one type as another type
  transmute_copy  - copy then transmute
  uninitialized   - returns a value of T without initializing memory

C++ <memory>
  allocators      - different allocation strategies
  memcpy          - copies the bytes
    memcpy(Addr, Addr, Size)
  addrof          - get the address of the value

Other needs
  memzero

TODO:
  Should I provide a method to allocate at a given address ???
  Determine how deref should work for allowing modifications to the existing memory
    ie. Behavior with 'mut T&' expected
  Need to add a way to get the 'Type' object from a type value