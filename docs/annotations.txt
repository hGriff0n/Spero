
Grammar
  @<variable><tuple>?

  A ! at the end of the annotation name marks the annotation as "global"
    This distinction determines what bodies of code the annotation applies to
      Normal (local) annotations apply to the next encountered statement
      Global annotations apply to the entirety of the compilation block
        TODO: Should this be orderable (ie. only apply to the "rest" of the block)?

Current recognized annotations:
  pure     - Promises that the function is "pure"
    May be used to allow for functions/values in compile-time contexts
    Compiler checking may be rather basic
  mutable  - Restrict a method/type availability to mutable instances
    TODO: Decide if '@mutable { .. }' should export '..' into the parent scope (NOTE: Not yet)
  disable  - Turn off the language features
    TODO: Determine which language features are "toggleable"
  primary  - Apply annotations to the primary constructor
    TODO: Not sure if this is the best method
  explicit - Mark a constructor as "invalid" for implicit construction resolution
  safe     - Mark a block of unsafe code as "safe" to execute
    Accepts an optional string literal clarifying why the code segment is "safe"
  unsafe   - Mark a block of safe code as "unsafe"
  todo     - Raise a warning
  asm      - Output assembly code for the target architecture
  truthy   - Specify a method to be used for converting values of a type into Booleans
    Named function must take no arguments and return a Bool or this annotation produces a compiler error
      ie. sig(fn) = () -> Bool in "@truthy(fn)

Ideas for annotations:
  mem_limit - restrict the amount of memory a type/module/etc can use
  allow     - turns off compiler warnings or turns on language features that were disabled
  cfg       - conditional compilations/definitions
  error_def - ???
  assert    - raise a compiler error if a condition evaluates to false
  force     - requires/disables language features to create environment
  enable    - opposite of disable

Ideas:
  Expand annotations to be able to make macros with them
  Find a way to create custom annotations in user code
  Find a way to create queryable annotations
  Look into extending safe with "assert", require compile-time code that can evaluate to true/false
