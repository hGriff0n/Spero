## TODO
Figure out how concurrency will be implemented
##

built-in event loop (ala lever)
    easy to develop concurrency
    main would be a default

Compile-time execution (ala Ante)


Safety annotations (see Rust for better explanations)
	Some segments of code are inherently unsafe, but necessary
	These segments can be executed within a "safe" block through the '@safe' annotation
		This turns off some, but not all, compiler checks to
	If an unsafe function/operation is not surrounded in a "safe" block, the encompasing function is considered to be unsafe
		main (or the entry function) must be considered safe
	It's also possible to mark functions/etc. as "unsafe" through '@unsafe'

Some annotations can "export" the enclosed code into the encomposing scope
	let x = 5
	@mutable { ... }
		Everything in the '...' is in the same scope as 'x' (not in a sub-scope)


# Foo can only exist as a mutable object
@mutable
def Foo = { ... }

# Bar can't exist as a mutable object
@mutable(false)
def Bar = { ... }