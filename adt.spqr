mod std:adt

use std:error:panic!

# Standard ADTs
def Either[L, R] = Left(L) | Right(R) {
    # Overloading on return type is allowable
        # Can I "overload" within the same function ???
    def get = () -> self.match {
        Left(l) -> l
        Right(r) -> r
    }
}

def Result[T] = Ok(T) | Error(String) {
    use Either[T, String]
}

def Option[T] = Some(T) | None {
    def is_some = self.match {
        Some(_) -> true
        _ -> false
    }

    def is_none = !is_some

    def expect = (msg :: String) -> self.match {
        Some(v) -> v
        _ -> panic!(msg)
    }

    def unwrap = () -> expect("Attempt to call unwrap on a None")

    def unwrap_or = (v :: T) -> self.match {
        Some(t) -> t
        _ -> v
    }
}