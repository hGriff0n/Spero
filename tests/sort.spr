mod test:usability

use std:util

# pointless syntax is pretty nice
def sum[T] = .reduce(+, T)

def binarySort[T :: Comparable] = (set :: Indexable[T]) -> {
    if (set.size == 1) return set;

    # set(1..) is currently "new" syntax
    let left = set(1..).filter(< set(0)).binarySort
    let right = set(1..).filter(>= set(0)).binarySort

    return left ++ set(0) ++ right
}

# Inplace definitions, require pointers to implement
def binarySort[T :: Comparable] = (set :: mut Indexable[T]&, l = 0 :: Size)
    -> binarySort(set, l, set.size)

def binarySort[T :: Comparable] = (set :: mut Indexable[T]&, l = :: Size, r :: Size) -> {
    return.if r - l == 1

    # perform partitioning
    let j = mut l
    # if set(m) >= set(l) {             # Can I just use '()' on straight pointers ???
    if {&set}(m) >= {&set}(l) {
        j += 1
        util:swap(set, j, m)
    }.for m in {l + 1}..r

    # Reset the algorithm invariant and recurse
    swap(set, j, l)
    binarySort(set, l, j)
    binarySort(set, j, r)
}

def main = () -> {
    # Command line interaction is done through the 'env' module
    let args = std:env:getArgs
    "{}".println(args.map(_.toInt).sum)

    let array = [3, 4, 1, 2, 9, 8]
    "{}".println(array.binarySort)          # [1, 2, 3, 4, 8, 9]
    "{}".println(array)                     # [3, 4, 1, 2, 9, 8]
    
    @safe
    "{}".println(array.mut_ref.binarySort)  # ()
    "{}".println(array)                     # [1, 2, 3, 4, 8, 9]
}
