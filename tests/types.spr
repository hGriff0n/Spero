use std:{fs, sys}

def Foo = {
    let f :: mut fs:File

    static new = () -> "f.txt".Foo

    static new = (file :: String) -> Foo {              # Completing the definition for Foo
        f = mut file.fs:File                            # 'f' must gain a value here (as it's `let` bound)
        "Opened at {}".writeln(f, sys:now)              # immutable members must also recieve values here
    }                                                   # mutable 'def'/'static' members don't require value assignment
                                                        # Though that will make the resulting type abstract
    static drop = (f :: mut Foo) {
        "Closed at {}".writeln(&f.f, sys:now)
    }
}

# This is sugar for the Foo
def SugarFoo = (file :: String) {
    let f = mut file.fs:File
    "Opened at {}".writeln(f, sys:now)

    static new = () -> "f.txt".Foo

    static drop = (f :: mut Foo) {
        "Closed at {}".writeln(&f.f, sys:now)
    }
}

# The primary constructor is explicit (not available for overload resolution)
@primary(explicit)
def Bar = (n :: mut Int) {
    static new = (min :: Int, max :: Int) ->
        Bar(std:math:rand:Random(min, max))

    # This constructor is only usable within this class
    @private
    static new = (r :: std:math:rand:Random) -> Bar(r.next)
}

def main = () {
    let f = Foo

    Foo:drop(f)         # Delete f here
    #let r = f          Error: 'f' was dropped

    let f = 3
    let r = f           # Fine. r = 3

    let f = Foo
    let r = f           # Copy 'f'
    Foo:drop(f)         # Drop 'f'

    let f = Foo
    using r = f
    Foo:drop(f)         # Copy, drop, and invalidate 'f'. 'r' assumes ownership of Foo 

    Foo                 # Calls consructor and destructor
    Foo:drop(Foo:new)   # Same as previous line
}