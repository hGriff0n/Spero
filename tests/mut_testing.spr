mod mut_testing
use std:{sys, io}
use std:util:_

def foo = (x :: Int) -> {
    let x = mut x       # T => mut T. Copy
    x += 3
    let x = x           # mut T => T. Reuse
}

def foo = (x :: mut Int) -> foo(x)

def mfoo = (x :: mut Int) -> {
    x += 2
}

let Foo = {
    use sys:now
    let arr = mut [1, 4, 3, 6].Vector[Int]

    if now.hour < 12
        "WAKE UP!".io:println

    # Mutable-only methods
    @mutable
    def sort = () -> arr = arr.sort

    @mutable
    def push = (x :: Int) -> arr = arr.push_back(x)


    # This method has different behavior based on the object's mutability
    def pop = () ->
        arr.pop_back .if @mutable else "Pop!".io:println

    # Immutable methods
    def size = () -> arr.size

    def toStr = () -> arr.toStr


    # Custom constructors are implemented as static methods
    static new = (mult :: Int) ->       # The '{...}' is "completing" the definition
        Foo {                           # Technically the type is abstract (members have no values)
            arr = mut [1, 4, 3, 6].map(* mult).Vector[Int]
        }

    static new = (mult :: Int) -> {
        let ret = mut Foo               # Piggyback on the default constructor
        ret.arr.map!(* mult)
        ret
    }
}

def main = () -> {
    use io:println

    let x = 3
    let x = x               # T => T. Optimize

    foo(x)                  # f(T) => f(T). Reuse
    "{}".println(x)         # Should print '3'

    mfoo(x)                 # f(T) => f(mut T). Copy
    "{}".println(x)         # Should print '3'

    let r = x               # V = T. Alias
    let x = x + 3           # T => T. Reuse

    "{}".println(r)         # Should print '3'
    
    {
        let t = x
        let x = mut 2
        "{}".println(t)     # Should print '6'
    }

    let f = Foo
    "{}: {}".println(f.size, f)

    # sort modifies f
    f.sort!
    "{}: {}".println(f.size, f)
}