##
Mut semantical checking:
    In order to determine how pointers should work, I need to nail down the rules for mutability changes
    Mutability changes can occur in two places (that we care about atm): Assignment and Deconstruction
        Assignments are any statements of the form "let t = mut? v" where t and v may be the same
        Deconstruction is the transition from ADTs to variables within match statements
    These rules must work and consider all possibilities, particularly pointers and references
##
def testfoo = () -> {
    let t = 3               # Standard assignment, no issue
    let t = mut t           # Mutable reassignment, no links, can reuse memory
    let t = t               # Non-mutable reassignment, no links, can reuse memory
    let r = t               # Non-mutable assignment, can maintain link
    let z = mut t           # Mutable assignment, must copy
    let t = mut t           # Mutable reassignment, ???
    let t = mut t + 3       # No issue, z=t+3 is a seperate location (register)
}

##
Assignment checking (for normal, ie. non-pointer/reference, values):
    mut->const, same, _    = change mutability
    mut->_, diff, _        = copy
    mut->mut, same, _      = delete, warn
    const->const, same, _  = delete, warn
    const->const, diff, _  = alias
    const->mut, same, _    = copy
    const->mut, same, 1    = change mutability
    const->mut, diff, _    = copy

    Tuple deconstruction can be taken as the sum of the checks for it's members
        The deconstruction is an error iff the assignment of any member is an error
##

def ptrfoo = () -> {
    let t = mem:malloc(5)       # :: Size* (use `ralloc` to get a reassignable pointer)
    let r = t
    let z = mut t               # :: mut Size* (ie. memory is mutable), error
    let t = mut t
}

##
Assignment checking (for pointers, taking the idea from PointerTestClass.1):
    mut->const, same, 1   = change mutability
    mut->const, _, _      = error
    mut->mut, same, _     = delete, warn
    mut->mut, diff, _     = error
    const->const, same, _ = delete, warn
    const->const, diff, _ = copy
    const->mut, same, 1   = change mutability
    const->mut, _, _      = error
##

def sumList = (l :: List&) -> {
    let l = mut l                               # error. References cannot be changed from 'const' to 'mut'
}

def testRef = (l :: mut List&) -> {
    let l = l                                   # I can definitely remove this sequence in analysis (no side-effects)
    let l = mut l                               # But should this still produce an error according to reference rules ???
                                                # The question is "how advanced is this analysis phase?"
}

##
Assignment checking (for references):
    mut->mut, same, _     = delete, warn
    mut->mut, diff, _     = alias
    mut->const, same, 1   = change mutability
    mut->const, same, _   = error
    mut->const, diff, _   = error
    const->mut, _, _      = error
    const->const, same, _ = delete, warn
    const->const, diff, _ = alias
##


# ADT deconstruction borrows the values when assigning to the variables
def decTest = (l :: Option[Int]) -> match l {
    Some(p) -> p                # Perfectly fine, follow from assignment rules
    Some(mut p) -> p            # Might not be allowed in conjunction though
}

def decTest = (l :: mut Option[Int]) -> match l {
    Some(p) -> p                # Perfectly fine, follow from assignment rules
    Some(mut p) -> p            # Might not be allowed in conjunction though
}

def decTest = (l :: mut Option[Int]) -> match l {
    Some(mut& p) -> p += 3      # Taking something by reference
    Some(&p) -> p               # This is taking `p` by const-reference
    None -> 0
}

##
IDEA: Regarding errors/warnings in regards to transformable operations
    Some constructions may produce errors according to the raw rules of the language
    However, with simple analysis and stable transformations, these constructions can be
        removed and substituted with a construction that does not produce errors
    In these conditions, the error should be maintained in the compiler as a warning
##


# The question is given this simple type, find a way to break the mutability assurances
def List = {
    def next = mut None :: Option[mut List*]
    def val = mut 5
}

def workWithList = (l :: List&) -> {
    match l.next {
        Some(p) -> {                        # const->const, ptr, nom -> copy
            # let mp = mut p.borrow         # error: Attempt to call mutable method 'borrow' on immutable object 'p'
            # let mp = mut p                # error: Attempt to take const ptr 'p' with >1 references as mutable

            # There are three ways to modify 'l.next.val'
                # 1. Find it's location in memory, use mem:Chunk to modify it. That's unsafe, can't get around that.
                # 2. Straight cast the immutable pointer into a mutable variable. Prevented through Assign Rules
                # 3. Get the pointer into a condition not governed by "Mut Rules". Cast that as mutable.
                    # All ways to do that are restricted from const pointers through various aspects of "Mut Rules"
                    # I will also need to expand "Mut Rules" to cover more "value" cases in the future
            # Therefore, there is no "concievable" way of breaking this system

            mp.val += 3                     # Goal is to create a mutable object 'mp' that can modify `l.next.val`
        }
        # Some(mut p) -> p.val += 3         # error: Deconstructing const ptr from 'l.next' into a mutable object 'p'
        None -> 0
    }
}

##
Complete Assignment Rules (in regards to statements of the form "let t = v")
    (delta,name,ptr-ref,#refs)
    mut->mut, same, _, _       = delete, warn
    mut->mut, diff, ptr, _     = error
    mut->mut, diff, ref, _     = alias (+1)
    mut->mut, diff, na, _      = copy
    mut->const, same, ptr, >1  = error
    mut->const, same, ref, >1  = error
    mut->const, same, _, _     = change mutability
    mut->const, diff, na, _    = copy
    mut->const, diff, _, _     = error
    const->mut, same, ptr, 1   = change mutability
    const->mut, same, na, 1    = change mutability
    const->mut, same, na, _    = copy, remove alias (-1)
    const->mut, same, _, _     = error
    const->mut, diff, na, _    = copy
    const->mut, diff, _, _     = error
    const->const, same, _, _   = delete, warn
    const->const, diff, ptr, _ = copy (+1)
    const->const, diff, ref, _ = alias (+1)
    const->const, diff, na, _  = alias (+1)

    Tuples are deconstructed according to the sum of their members
        If any member errors, then the entire deconstruction is an error
    Aren't these rules more relevant to adding `mut` to a value ???
##

##
Complete Deconstruction Rules (ie. `Some(t) -> t`)
    (delta, ptr-ref, catch)
    mut->mut, na, nom      = copy
    mut->mut, ptr, nom     = borrow
    mut->const, na, nom    = alias (+1)
    mut->const, ptr, nom   = borrow
    const->mut, na, nom    = copy
    const->mut, ptr, nom   = error
    const->const, na, nom  = alias (+1)
    const->const, ptr, nom = copy (+1)
    const->mut, na, ref    = error
    _->_, na, ref          = reference
    _->_, ptr, ref         = error

    It's not possible to store references in a type
        Therefore it's not possible to deconstruct on a reference (don't have to case it)
    Borrowing has to be implemented as a transform on some internal state to pointers
        Therefore `borrow` has to be implemented as a mutable method on pointers
        Note: 'borrow' basically acts like copy for const ptrs, can I just combine them ???
            borrow does have an explicit "feel" to it's nature though
##