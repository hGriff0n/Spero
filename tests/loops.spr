mod loopy
use std:io:println


def Foo = {
    def start = mut 3;
    def step = mut 2;
    def end = mut 7;
}

def main = () -> {
    let arr = [1, 2, 3]
    let prod = mut 1
    
    # Testing while loops
    let i = mut 0
    while i < arr.len do
        i += 1

    let iter = mut arr.iter
    loop {
        prod *= iter.next
        if (!iter.hasNext) break;
    }

    "{} - {}".println(prod, i)


    # Testing for loops with iterables
    for i in arr {
        prod *= i
    }

    for mut i in arr {
        i += 2;
    }

    "{}".println(arr)


    # Testing for loops with ranges
    for i in 1..3 {
        prod *= i
    }

    let f = Foo

    for i in {f.start..f.end} {}
    for i in f.start.if true..f.end {}                      # Fails type-checking
    for i in {f.start.if true}..f.end {}                    # Might fail type-checking

    for i in {f.start..f.end}.filter(_ % 2 == 0) {}
    
    for i in f.start.if f.start > 4 else 5..f.end {}        # Fails type-checking (if and for)
    for i in {f.start.if f.start > 4 else 5}..f.end {}


    ##
    For loop translations
    ##
    # Iterable
    for mut i in arr do {
        i += 1;
    }

    # Translation
    {
        let iter = mut arr.iter
        while iter.hasNext match iter.next {
            mut i -> i += 1
        }
    }

    # Generator
    for elem in rev_gen(3, 4, 1, 6, 2, 34) do
        "{}".println(elem)

    def rev_gen[T] = (elems :: T*) -> {
        let rev_stack = std:util:Stack[T]

        for elem in elems
            rev_stack.push(elem);

        while rev_stack.size > 0
            yield rev_stack.pop;
    }

    # Translation
    match wait rev_gen(3, 4, 1, 6, 2, 34) {
        None -> break;
        Some(elem) -> {
            "{}".println(elem)
        }
    }.loop

    # Mutating elements (NOTE: Experimental, This might change in the future)
    @safe("No yield or returning of local pointers")
    for mut i in arr.ref_iter {
        i &*= 2;
    }

    # Translation
    @safe("No yield or returning of local pointers")
    {
        let iter = mut arr.ref_iter
        while iter.hasNext match iter.next {
            mut i -> i &*= 2;
        }
    }
}