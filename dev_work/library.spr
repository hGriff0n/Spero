mod library;


use std:util;
use std:sys;
use mysql:{connect, Database};
use docopt;
use serialzie;

def main = () -> {
    let (db, args) = docopt:interface(
        docopt:Arg("-db", String),
        docopt:Arg("-p", String)).parse(sys:env:args())

    let db = mut connect(db).panic_on_error()

    match args.splitFirst {
        "add", args => add(args, db);
        "update", args => update(args, db);
        "remove", args => remove(args, db);
        "show", args => display(args, db);
    }
}

let add = (args, db) -> {
    let new = Book:serializeFrom(args);
    db.insert_into("books", new).match {
        @todo!("Handle result of insert")
    }
}

let update = (args, db) -> {
    let change = Book:serializeFrom(args);
    db.update("books", change).match {
        @todo!("Handle result of update")
    }
}

let remove = (args, db) -> {
    let remove = String:serializeFrom(args);
    db.remove("books").where((id) => id == remove).match {
        @todo!("Handle result of remove")
    }
}

let show = (args, db) -> {
    db.select("*").from("books").match {
        b if b :: Book => std:io:println("{}", b);
        _ => @todo!("Handle error case")
    }
}

let panic_on_error[T] = (Result[T]) -> :: T .match {
    Err(e) => sys:panic(e)
    Ok(t) => t
}
