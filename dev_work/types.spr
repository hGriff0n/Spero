use std:{fs, sys}

def Foo = {
    let f = mut fs:File()

    @static
    def new = () -> "f.txt".Foo()
}

# This is sugar for the Foo
def SugarFoo = (file :: String) {
    let f = mut file.fs:File()
    "Opened at {}".writeln(f, sys:now())

    @static
    def new = () -> "f.txt".Foo()

    static drop = (f :: mut Foo) -> {
        "Closed at {}".writeln(f.f, sys:now)
    }
}

# The primary constructor is explicit (not available for overload resolution)
@primary(explicit)
def Bar = (n :: mut Int) {
    @static
    def new = (min :: Int, max :: Int) -> new Bar(std:math:rand:Random(min, max))

    # This constructor is only usable within this class
    @static
    let new = (r :: std:math:rand:Random) -> new Bar(r())
}

# How to return a function ???
def creator = (T :: Type) -> T:new

def main = () -> {
    let f = new Foo()

    Foo:drop(f)         # Delete f here
    #let r = f          Error: 'f' was dropped

    let f = 3
    let r = f           # Fine. r = 3

    let f = Foo.new()
    let r = f           # Copy 'f'
    Foo:drop(f)         # Drop 'f'

    let f = creator(Foo)
    using r = f
    Foo:drop(f)         # Copy, drop, and invalidate 'f'. 'r' assumes ownership of Foo

    Foo()               # Calls consructor and destructor
    Foo:drop(Foo:new)   # Same as previous line
}
