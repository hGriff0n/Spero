mod exercises

use std:{io, math, util}:_

##
A collection of introductory programming solutions in spero
Problems taken from https://adriann.github.io/programming_problems.html
##

# How can I write generic lambdas ???

def lcs = (s1 :: String, s2 :: String) -> {
    let dyn = Matrix[Size](s1.size + 1, s2.size + 1)                    # Default initializes to 0

    for (c, i) in s2.zipWithIndex {
        let j = i + 1
        if s1(i) == c do
            dyn(j, j) = dyn(i, i) + 1

        dyn(j, j) = max(dyn(j, j), dyn(i, j), dyn(j, i))                # Not sure whether this is right
    }

    return dyn(s1.size, s2.size)
}

@todo("Given a list of numbers, write a program to efficiently answer 'What is the nearest larger value from the number at i?'")
@todo("[1, 4, 3, 2 5, 7], 4 -> 5")
def nearestLarger = (Int*, Int) -> {}

@todo("Given two strings, write a program that outputs the shortest sequence of insertions/deletions",
        "Needed to turn one string into the other")
def minimalTransform = (String, String) -> {}

def Matrix[T] = (n :: Size, m :: Size) {

}
def Matrix[T, n, m] = :: Matrix[T] { super(n, m) }
@todo("Write a function that multiplies two matrices together", "Bonus for efficiency")
def multiply[T, n, m, p] = (Matrix[T, n, m], Matrix[T, m, p]) -> {
    let retval = mut Matrix[T, n, p]
}
@todo("Add better error messages")
def multiply[T] = (Matrix[T], Matrix[T]) -> @error!("Cannot multiply together matrices where sizes do not match")

@todo("Design a van Emde Boas tree type")
def VebTree[T] = {}

def Box[d] = {}
@todo("Given a set of d-dimensional boxes, write a program that computes the volume of their union")
def unionVolume[d] = (Box[d]*) -> {}


@todo("Get a gui library")
@todo("Write a program that displays a bouncing ball")
def bouncingBall = () -> {}

@todo("Write a memory game")
def memory = () -> {}

@todo("Write tetris")
def tetris = () -> {}


@todo("Write an ai that plays hangman as best as possible")
def playHangman = () -> {}

@todo("Write an ai that can beat humans at RPS")
def rockPaperScissor = () -> {}

@todo("Write an ai that can play battleship")
def playBattleship = () -> {}
