mod exercises:lists

use std:{io, math, util}:_

def max[T :: Comparable] = (T..) -> .reduce((l, r) -> if l < r do r else l)

def reverse[T] = (list :: mut Indexable[T]&) -> {
    for i in Range(0, list.size / 2)
        list.swap(i, list.size() - i)

    list
}

def occurs[T :: Comparable] = (elem :: T, list :: T..) ->
    list.reduce((b :: Boolean, p) -> b || p == elem, false)

def oddIndices[T] = (T..) ->
    .zipWithIndex.filter(_.1 % 2 == 1).map!(_.0)                        # I don't think the '_' syntax is settled

def runningTotal[T] = (list :: T..) -> {
    let col = mut Vector[T]()                                           # Need to instantiate a type I know has `pushBack`

    for elem in list do
        col.pushBack(col.back.or_else(T) + elem)

    col
}

def isPalindrome = (s :: String) -> {
    let halves = mut s.split(s.len / 2);                                # Should this return a Collection or a Tuple ??

    if s.len % 2 == 1                                                   # If the string cannot be split in two
        halves(0).pushBack(halves(1)(0))                                # Put the middle character in both strings
                                                                        # I'm assuming split would leave the secon string bigger here

    halves(1).reverse!()
    halves(0).zipWith(halves(1)).reduce((b, a) -> b && a.0 == a.1, true)
}

def forSum[T] = (list :: T..) -> {
    let acc = mut T()
    for elem in list acc += elem
    acc
}

def whileSum[T] = (list :: T..) -> {
    let acc = mut T
    let iter = mut list.iter()
    while iter.hasNext() do
        acc += iter.next()
    acc
}

def speroSum[T] = (T..) -> .reduce(+, T())

def recurSum[T] = (list :: Iterable[T]) -> {
    if list.empty() return T()
    list(0) + list(Range(1)).recurSum()
}

def handMap[T, V] = (list :: Iterable[T], fn :: (T) -> V) -> {
    let col = list.type.new()
    let pushBack = if !{col .? pushBack} () -> ()               # Goal: Return the same type that was passed in
                                                                # Without knowing the collection type that was passed
    for elem in list                                            # The line tries to define a pushBack function if
        col.pushBack(elem.fn())                                 # none is defined for the class

    col
}

def printSquares = (Size*) -> .handMap("{}".println(_ ^ 2))

def concate[T] = (l1 :: Iterable[T], l2 :: Iterable[T]) -> {
    let ret = l1.copy.Vector[T]()                               # I want there to be a way to implement this to return
                                                                # the same type of the list passed in to the function
    for elem in l2 do ret.pushBack(l1)                          # But i need a definition for pushBack to do so
    ret
}

def alternateCombine[T] = (l1 :: Iterable[T], l2 :: Iterable[T]) -> {
    let ret = mut Vector[T]()

    let (iter1, iter2) = mut (l1.iter(), l2.iter())            # Used this because size(l1) may not = size(l2)

    while iter1.hasNext() && iter2.hasNext() {
        ret.pushBack(iter1.next())
        ret.pushBack(iter2.next())
    }

    while iter1.hasNext() do ret.pushBack(iter1.next())
    while iter2.hasNext() do ret.pushBack(iter2.next())
    ret
}

def merge[T] = (l1 :: Iterable[T], l2 :: Iterable[T]) -> {
    let ret = mut Vector[T]()
    let (iter1, iter2) = mut (l1.iter(), l2.iter())

    # TODO: Need to update the vs extension to highlight tuple decomposition
    while iter2.hasNext() {
        vec.pushBack(iter1.takeWhile(_ < iter2.peek()))
        break.if !iter1.hasNext()                               # This is needed to prevent errors by calling iter1.peek on an empty iterator
        vec.pushBack(iter2.takeWhile(_ < iter1.peek()))         # I need a better way of getting around this
    }                                                           # I could define `<` for Option[T] (as a monad)

    # Alternate way of accessing elements from iterators
    loop match iter1.getNext() {
        Some(elem) -> ret.pushBack(elem)
        None -> break;
    }
    while iter2.hasNext() do ret.pushBack(iter2.next())
    ret
}

def rotate[T] = (list :: Indexable[T], k :: Int) ->
    list(Range(k)).concat(list(Range(0, k)))

def fibonacci = (n :: Size) -> {
    static memoize = mut [1, 1].Vector[Size]

    for i in Range(memoize.size, n) do
        memoize.pushBack(memoize(i - 1) + memoize(i - 2))

    return memoize(n - 1)
}

let DigitList = Deque[Char] :: {}
def toDigitList = (n :: mut Int) -> {
    let list = mut DigitList()

    let isneg = n < 0
    n.abs!()

    while n != 0 {
        list.pushFront({ n % 10 }.Char:parseInt())
        n /= 10
    }

    list
}

@todo("Write function to add/subtract/multiply numbers in digit-list representation")
@todo("Maybe implement Karatsuba multiplication and different bases")
@todo("The digit list won't be a sequence of integers")
def digitMatch = (DigitList, DigitList, c :: Char) -> c.match {
    '+' => ()
    '-' => ()
    '*' => ()
}

@todo("Write function to interpret digit-list in base b1 and convert to digit-list in base b2")
def digitToBase = (DigitList, Size, Size) -> {}

def selectionSort[T :: Comparable] = (list :: mut Indexable[T]&) ->
    for i in Range(0, list.size() - 1) do {
        let min = mut j
        for i in Range(j + 1, list.size())
            if list(i) < list(min) min = i

        list.swap(i, j).if min != j
    }

def insertionSort[T :: Comparable] = (list :: mut Indexable[T]&) -> list.insertionSort(0, list.size())

def insertionSort[T :: Comparable] = (list :: mut Indexable[T]&, l :: Size, r :: Size) ->
    for i in 1..{r - 1} {
        let j = mut i
        while j > 0 && list(j - 1) > list(j) {
            list.swap(j, j - 1)
            j -= 1
        }
    }

def mergeSort[T :: Comparable] = (list :: mut Indexable[T]&) -> {
    let mergeSort = (l :: Size, r :: Size) -> {                              # would 'static' work here?
        return.if r - l == 1

        let mid = l + {r - l} / 2
        mergeSort(l, mid)
        mergeSort(mid, r)

        let up = mut mid
        if list(up) < list(i) {
            list.swap(i, up)
            up += 1
        }.for i in Range(l, mid-1)
    }

    mergeSort(0, list.size())
}

def quickSort[T :: Comparable] = (list :: mut Indexable[T]&) -> {
    let quickSort = (l :: Size, r :: Size) -> {
        return list.insertionSort(l, r) .if r - l < 40
        let mid = l + {r - l} / 2

        # partition

        quickSort(l, mid)
        quickSort(mid, r)
    }

    quickSort(0, list.size())
}

def stoogeSort[T :: Comparable] = (list :: mut Indexable[T]&, left :: Size, right :: Size) -> {
    if list(right) < list(left) list.swap(left, right)

    if right - left >= 3 do {
        let t = Float.ceil({right - left} / 3)
        stoogeSort(list, left, right - t)
        stoogeSort(list, left + t, right)
        stoogeSort(list, left, right - t)
    }

    list
}
def stoogeSort[T] = (list :: mut Indexable[T]&) ->
    (list, 0).stoogeSort(list.size() - 1)

def binarySearch[T :: Comparable] = (list :: Indexable[T], elem :: T, left :: Size, right :: Size) -> {
    static middle = (l, r) -> {{r - l} / 2} + 1

    middle(left, right).match {
        mid if mid == left      => return elem == list(left)                        # Be sure to add in conditional match syntax
        mid if elem < list(mid) => return binarySearch(list, elem, left, mid)
        mid                     => return binarySearch(list, elem, mid, right)
    }
}
def binarySearch[T :: Comparable] = (list :: Indexable[T], elem :: T) ->
    (list, elem, 0, list.size).binarySearch()

def framePrint = (strs :: String..) -> {
    let siz = strs.reduce((l, s) -> if l < s.len() s.len() else l, 0) + 4

    "{}".println('#'.rep(siz))
    for str in strs "# {} #".println(s)
    # strs.foreach("# {} #".println)                    # Could println return a function that takes 'n' elements ???
    "{}".println('#'.rep(siz))                          # Rely on partial application (though that may conflict with normal behavior)
}


# Simple type to prevent wrong calling of translate function
let PigLatinString = (str :: String) {                  # Constructor arguments are protected by default
    let str = str.split(" ").map!((s) -> s(Range(1)) + s(0) + "ay").join(" ")

    def translate = () -> str.split(" ").map!((s) -> {
        let tail = s(Range(0, s.len() - 3))
        s(Range(s.len() - 2)) + tail
    }).join(" ")
}
