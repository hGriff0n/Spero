mod euler

use std:io:println

# Multiples of 3 and 5
def prob1 = () -> Range(6, 1000).filter((n) -> n % 3 == 0 || n % 5 == 0).reduce(+, 8)

# Even Fibonacci numbers
def fib = (n :: Int) -> {
    static mem = [1, 1].Vector()

    if (n >= mem.size())
        mem(n) = fib(n - 2) + fib(n - 1)

    mem(n)
}
def prob2 = () -> Range(1).map(fib).takeWhile(_ < 4000000).filter(_ % 2 == 0).reduce(+, 0)

# Largest prime factor
let largestPrimeFactor = (n :: Int) -> {
    let primes = [3, 5, 7, 11].Vector()
    let size = primes.size()

    # NOTE: This is actually a wrong implementation
    for i in Range(13, n.sqrt().ceil()).filter(_ % 2 == 1) do
        # This is actually wrong
        if !primes.contains(i % _ == 0)
            primes.pushBack(i)

    n .if primes.size() == size
    else primes.back()
}
def prob3 = largestPrimeFactor(600851475143)

# Largest palindrome product
def isPalindrome = (n :: Int) -> {
    let n = n.toStr()
    let n = mut n.split(n.len() / 2)

    if n(0).size() != n(1).size()
        n(0) += n(1)(0)

    n(0) == n(1).reverse()
}
def prob4 = () -> {
    let max = 999 * 999
    let min = 111 * 111

    Range(max, min).findIf(isPalindrome)
}

# Smallest multiple (smallest multiple of 1..21)
def prob5 = () -> {
                  # primes             composites
    let uniques = [11, 13, 16, 17, 19, 12, 14, 16, 18, 20]

    # ???
}

def euler = () -> {
    "1: {}".println(prob1)
    "2: {}".println(prob2)
    "3: {}".println(prob3)
    "4: {}".println(prob4)
    "5: {}".println(prob5)
}
