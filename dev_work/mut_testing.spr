mod mut_testing
use std:{sys, io}
use std:util:_

def foo = (x :: Int) -> {
    let x = mut x       # T => mut T. Copy
    x += 3
    let x = x           # mut T => T. Reuse
}

# You can't overload a function based on the mutability of an argument (at least for non-pointers/references)
# def foo = (x :: mut Int) -> let x = x in foo(x)       # Make x immutable to prevent infinite recursion

def mfoo = (x :: mut Int) -> x += 2

let Foo = {
    use sys:now
    let arr = mut [1, 4, 3, 6].Vector[Int]

    if now.hour < 12
        "WAKE UP!".io:println

    # Mutable-only methods
    def sort = mut () -> arr.sort!                      # Looking into allowing this to be named 'sort!'
    def push = mut (x :: Int) -> arr.push_back(x)


    # This method has different behavior based on the object's mutability
    def pop = () -> @mutable(arr.pop_back, "Pop!".io:println)
        # '@mutable(true, [false])

    # Immutable methods
    def size = () -> arr.size
    def toStr = () -> arr.toStr


    # Custom constructors are implemented as static methods
    static new = (mult :: Int) ->       # The '{...}' is "completing" the definition
        Foo {                           # Technically the type is abstract (members have no values)
            arr = mut [1, 4, 3, 6].map(.* mult).Vector[Int]
        }

    # Alternate way of defining the same constructor (using "complete" syntax)
    static new = (mult :: Int) -> {
        let ret = mut Foo
        ret.arr.map!(.* mult)
        ret
    }
}

def main = () -> {
    use io:println

    let x = 3
    let x = x               # T => T. Optimize

    foo(x)                  # f(T) => f(T). Reuse
    "{}".println(x)         # Should print '3'

    mfoo(x)                 # f(T) => f(mut T). Copy
    "{}".println(x)         # Should print '3'

    let r = x               # V = T. Alias
    let x = x + 3           # T => T. Reuse

    "{}".println(r)         # Should print '3'
    
    {
        let t = x
        let x = mut 2
        "{}".println(t)     # Should print '6'
    }

    let f = Foo
    "{}: {}".println(f.size, f.toStr)       # 'Foo' doesn't implement 'Serializable'

    # sort modifies f
    f.sort!
    "{}: {}".println(f.size, f.toStr)
}