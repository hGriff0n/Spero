
mod mem:testing

use std:lang:mem

##
Design Goals of Memory Management:
    1) Have a way to mark and use sections of non-stack memory for implementation purposes
        Solution -> mem:alloc, mem:valloc
    2) Have a way to use specific sections of memory for implementation purposes
        Solution -> mem:Chunk(mem:Addr, Size)
    3) Have a way to enable reference semantics in function calls
        Solution -> T&, mut T& (C++ style references)
    4) Have a way to type a sequence of elements
        Solution -> T.. => Iterable[T]
    5) Have a way to maintain typing on a sequence of differently-typed elements
        Solution -> [T..], (T..)
    6) Have a way to create links to non-stack memory usable at a public level
        Solution -> mem:malloc, mem:ralloc, T*, T mut*

    Development Process:
        Come up with many possibilities
            There's several ways that an interface can work
            Pick one, and then develop everything based around that central idea
            Repeat for each interface before culling them to one form that works the best

    Accepted Language Changes:
        Changing "view" typing from 'T*' to 'T..'
            Also changing pointers from 'T&' to 'T*' and the addition of references
            Variadics are done with the 'T..' in the generic array
        Update documentation and ast/grammar to support references
            Make sure that the current system supports pointers as well
        Adding 'T..' variadic support to generics
        Allow for a '{}' block after an 'impls' statement
            The block contains implementations for the 'impls' type
        Allow for "let-in" style bindings by allowing an 'in <expr>' in assignments
            Note: This will likely also require adding an ast node
        Update 'use' to allow for rebinding generic instantiated types
            Allow for "use Vector[Int] as IVector" 
        Add in "inline mut" into the language and be sure the ast recognizes it
            I'm pretty sure the grammar recognizes as a by-product of recognizing `ValExpr`
        Change operator precedence rules so that '&' operators have one precedence
        Add ability to destruct ADT values by reference within match statements
            Requires a grammar and parser change to allow for "Some(mut& p)" and "Some(&p)"
            Also update the grammar/ast to collect information for "Mut Rules" testing
        'drop' is implemented as a public mutable method with no arguments
        Combine all language design documents TODO into one location
            Add "find method for allowing custom annotations"
            Look into adding in a special 'Self' type for OOP interactions
            Look into tweaking the 'impls' statement in relation to the '{}' block (requiring the '{}', dropping 'let')
            Look into moving 'mut' into the binding area (lhs, depends on how tuple deconstruction works with 'mut')
            Look into allowing the creation of lambdas through the '_' character (may be difficult to implement)
            Extend "Mut Rules" to include working with values and function calling
            Figure out how to catch and report an invalid construction caused by variadics
            Figure out whether references should be capturable by closures
            Check to see how much of my design relies on implicit lifetime checking
            Look into removing the ability to have named and primary constructors for a type
##

# 1,2: Designing the raw memory interface

##
'std:mem:Chunk' interface:
  This is the lowest level interface (excepting maybe Addr) that Spero provides into raw memory
  A `Chunk` is an owned, contiguous section of bytes that are untyped by default. Normally created through a call to 'mem:alloc'
  Various operations are provided to manipulate these bytes as the programmer desires
  Some operations are also provided to allow a more "type"-ful interaction into these manipulations
##
@safe("Allocations are dropped before function exit. Return does not leak references to dropped values")
def intArrayTest = () -> {
    let chnk = mut mem:alloc(Int.size * 4)          # Allocate space for 4 Int's. Returning a 'Chunk' allows for more intuitive operations
    # let chnk = mut mem:alloc(Int, 4)

    let fst = mut chnk.view_as[Int]                 # Make 'fst' refer to the first Int in 'chnk's region of memory
    fst.set(1)                                      # Would 'chnk' have to be mutable for this operation ???

    let thd = mut chnk(2 * Int.size).view_as[Int]   # These semantics ("Element[T] = T") is currently unstable as I'm not sure
    # let thd = mut chnk(2, Int).view_as[Int]       # Depending on how raw types work, this may be possible
    # let thd = mut chnk[Int](2).view_as[Int]       # I know this works, just is it feasible to do the analysis
    thd = 3                                         # How interchangeable a "Element[T]" should be with a "T". This implies very

    # Should equal '4' as 'alloc' zero-initializes
    {0..4}.map!(chnk.view_as[Int](_).get).reduce(+) # How will 'Element[T]:get' be typed ???

    # 'Chunk:drop' automatically frees the memory when the function exits
}

##
'std:mem:TyChunk[T]' interface:
  Chunk has no conception of types by default by design, it is just a collection of contiguous bytes in memory, nothing else
  From a language standpoint however, Spero puts a lot of focus on types and working with them instead of raw bytes in memory
  To that end, Chunk needs a way to interact with it's byte sequence (or sub-sequence) in a type-safe/-knowledgeable way
  That is the purpose of `TyChunk[T]`, an intermediate type between Chunk's raw memory view and Spero's whole type view.
  TyChunk's are created through various Chunk methods and act a lot like Chunk in several respsects. However, TyChunk trades
  Off the bitwise operations of Chunk for a more type-ful member list, including constructing an instance in place, etc. 
##
# NOTE: The name of 'TyChunk' (typed chunk) needs some work
@todo("Update the interface to the current 'Memory[T]' standard")
@safe("No leakage can happen with Integers and all allocated memory is released")
def initTest = () -> {
    let ptr = mem:calloc[Size](5)               # "Construction"-alloc. Allocates a chunk, and constructs the type in place
                                                # Note: 'mem:calloc' returns a 'mem:Chunk', not a 'mem:TyChunk[T]'
    let chnk = mut mem:alloc[Int](2)            # Same as "mem:alloc(Int.size * 2)". What effect does this have on system safety
                                                # IDEA: 'chnk.transmute(0)' would make a variable at the address of the first Int ???

    # chnk.set[Int](ptr.view)
    chnk.view_as[Int] = ptr.view_as[Int].get
    chnk.set[Int](1, ptr.view_as[Int].get)
}

##
'std:mem:Chunk' in relation to memory mapped devices:
  The `Chunk` interface is also usable in relation to pre-existing addresses, albeit with some trepedation
  Given a `std:mem:Addr`, a Chunk can be created by simple construction, passing the address and the size
  One stipulation to use in this strategy is that a 'forget' call must be inserted before the chunk is dropped (can't put in constructor for mem:alloc implementation)
  This is especially necessary if the address is reserved from the allocator, as Chunk:drop frees it for future allocation
##
@safe("Because")
def wrap = (mmio :: mem:Addr) -> {
    let device = mut mem:Chunk(mmio, 4)     # Chunk needs to have a bound for it's "control"
    # let device = mut mem:MemRef(mmio, 4)  # Might be able to make a separate type instead (having explicit call to forget is potentially unsafe)

    device.view_as[Size] = 35               # You can use '=' or 'set' for setting an 'Memory[T]'
    # device.view_as[Size].set(35)          # Though I think 'set' may be more idiomatic

    device.forget                           # Call 'forget' to prevent 'mmio' from being marked "free" in 'drop'
                                            # This interface makes memory safety the default behavior of Spero
                                            # You have to try to get the memory "unsafe" behavior
}


# 4,5: Designing the variadic typing interface

##
Language Atom (views):
  Views are a simple way of accepting a sequence of values, from a variety of syntaxes
  From a semantics standpoint, a `T..` is equivalent to a 'std:util:Iterable[T]` but with some tweaks
  For one, when used at the end of a function body, it allows to function to accept a variadic sequence of arguments
  The "leftover" arguments are collected into a single Iterable body, generally an Array, for usage in the function
  Of course, calling the function with an Iterable[T] is still allowed, though it prevents the variadic semantics
##
def sum[T] = (T..) -> .reduce(+, T)          # "T.." -> range of Ts

##
Language Atom (variadics):
  Views are a great way to save a lot of typing in some instances, especially for their flexibility
  However, with the usage of views, we run into issues where the sequence of types is unknown to the programmer
  It may be possible to perform this acceptance pattern using a 'Any'-style view, but that sacrifices type safety
  Variadics are a way of extending the generics system to allow for these views, while maintaining type information
  However, implementing variadics with the Iterable interface does not really gain us much of anything, instead
  Better matching tuples. This has some affect on typing as you can see below. The variadic pack, however, still
  Retains some neat syntax tricks, particularly the ability to "expand" through '..'
##
def forward[T, Args..] = (args :: Args) -> args.T

let TestType = (z :: Int) {
    def isInt = mut true

    static new = (f1 :: Float, f2 :: Float) {
        let t = mut TestType(f1 + f2 / 2)
        t.isInt = false
        t
    }
}
let useFwd = () -> {
    let t1 = 3.forward[TestType]
    let t2 = mut forward[TestType](3.4, 5.2)

    @assert!(t1.isInt != t2.isInt, "forward doesn't work as expected")
}



# 3,6: Designing the reference/pointer interface model

##
Language atom (pointers):
    The standard spero memory model puts everything on the stack by default. However that is artificially limiting given ram sizes
    We were able to come up with a framework to perform these access into the heap space, but those interfaces are entirely
    Unsafe and inherently unusable for most people. Pointers are the intersection between "normal" Spero and the manual memory
    Module, giving a nice balance of usability and safety for most use cases. Spero makes a distinction between 'stable' pointers,
    Pointers that cannot be reassigned, and 'reassignable' pointers, which can, within the typing system in order to allow for
    Straight mutability (that of the heap data) to be changed through the use of the 'mut' keyword.

    Typing (stable): 'T*', 'mut T*', 'Ptr[T]', 'mut Ptr[T]'
        Stable pointers are generated through a call to 'mem:malloc'
    Typing (reassignable): 'T mut*', 'mut T mut*', 'RPtr[T]', 'mut RPtr[T]'
        reassignable pointers are generated through a call to 'mem:ralloc'
##
def ptrTest = () -> {
    let ptr = mut mem:malloc(5)                 # Make a mutable pointer
    let o_ptr = mem:ralloc(7)                   # Make an immutable pointer

    # Reassigning pointers
    # ptr.swap(mut o_ptr)                       # Error: Attempt to reassign stable pointers `ptr` and `o_ptr`

    # AssignRules.(mut->const,diff,ptr,_) ==> error
    # let tst = ptr                             # error: Immutable+Mutable pointers to the same locations (how on earth do I determine that ???)
                                                # I can use mut-reassignment checking rules, to insert some checking code
    let tst = ptr.borrow                        # This method prevents using 'ptr' while test is in scope (still holding the borrow)
                                                # Think a bit of Rust's "ownership" concept in this regard (note: borrow is @mutable)
                                                # I need to think about it's interaction with number of references
    let tst = o_ptr                             # No problem. Should also drop the borrowing of `ptr`
    
    # Swap out the value
    let t = 5
    swap(ptr, t)
    

    # Way to create pointers from pre-allocated memory
    let ptr_pool = mut mem:alloc(8)
    let ptr1 = mem:mk_ptr_from[Int](ptr_pool)           # 'mk_ptr_from' takes a Chunk and creates a pointer for the given memory and type
    let ptr2 = mem:mk_ptr_from[Int](ptr_pool(4))        # TODO: Need to figure out memory-ownership (pointer or chunk, how would I handle pointer?)
                                                        # TODO: Also prevent 'null' pointers within this conception
                                                        # Note: `mk_ptr_from` should returns stable pointers (ala. "malloc")


    # IDEA: &-operators perform pointer arithmetic
    @assert!(ptr1 &+ 1 == ptr2)                 # You don't need to have `mut*` to perform arithmetic, only to reassign

    # Modifying the pointed object is simple with the 'deref' special method
    ptr += 5
    # o_ptr += 3                                # error: 'attempt to mutate an immutable object'
                                                # it may be a bit difficult defining 'deref' to enable these semantics
}


##
Language Atom (references):
  The standard Spero execution model requires an explicit pass-by-value model for arguments, copying where needed
  This disallows some useful ways of programming (with side-effects and memory efficiency), mostly in regards to OOP methods
  To this end, Spero allows 'T&' syntax to indicate a pass-by-reference "reference" ala C++ (switch the mutability though)
  A raw 'T&' is really only good for preventing accidental copying. Compilers may be allowed to add '&' in analysis/optimization for this reason
  Changing to 'mut T&' allows for the same mutability rules as 'mut T', but with the added benefit that changes propogate to the callee
  
  References are not allowed to be stored within a type, either through member or through ADT
    TODO: What about captures?

  TODO: Figure out what to do with 'mutator(mut 3)'
##
def mutator = (i :: mut Int&) -> i *= 3         # 'T&' takes on C++-style reference semantics with largely no changes
def keeper = (i :: Int&) -> i * 3
def tst = () -> {
    let me = 5
    # mutator(me)                               # "error" - attempt to take a mutable reference to an immutable object
    mutator(mut me)                             # 'inline mut' syntax can get around this issue
    keeper(me)                                  # But isn't this standard '(T)' behavior? Avoids copying unnecessarily
                                                # Copying only occurred in using a 'T' for a '(mut T)'
                                                # I could make that an optimization instead of a requirement

    let me = mut 5
    mutator(me)
    let me = keeper(me)                         # 'me == 45'
}
# Note: This is currently using the "two pointers" idea (even if there is a "sugary" syntax available)
def ptrRef = (p :: mut IPtr[Int]&) -> {}        # You can take pointers by reference ???
def mptrRef = (p :: mut Ptr[Int]&) -> {}        # This wouldn't "invoke" reference counting, possibly more efficient
                                                # The mutability problem remains though