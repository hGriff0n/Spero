# Let's start off with a simple "Cipher" trait
let Cipher = {
	def encode :: (String) -> String		# Note: This syntax is currently experimental (for specifying an interface)
	def decode :: (String) -> String
}

# You can write methods and stuff in terms of the interface
def encrypt = (msgs :: String*, cipher :: Cipher) ->
	msgs.map(cipher.encode)


# Lets create an instance of our Cipher class
let caeser = Cipher :: {
	def encode = .map((c) -> .+ 5)			# The types/arguments are inherited from the Cipher
	def decode = .map(_ - 5)			    # Take advangate of currying
}

caeser.encode("hello") == "JGNNQ"

# You don't have to bind anonymous types, you can use them directly too
["Hello", "World", "It's a me!"].encrypt(Cipher ::: {
	def encode = .map(13 + _)
	def decode = .map(_ - 13)
})


##
We can work with the Cipher interface and all, but what if we only want to accept caeser ciphers
Well right now, we only have instantiations of the Cipher type, but not a unique type
  At least one we can write interfaces in terms of (easily at least)
Luckily the fix is rather simpl
##

# Types are indicated by capital letters, variables by lowercase, and operators by symbols
	# So by capitalizing the name we can a much more flexible construction
	# Note that the arg list contract now specifies the constructor for the type
let Caeser = Cipher :: (shft :: Char) {
	# Provide the implementations
	def encode = .msg((c) -> c + shft)
	def decode = .map(.- shft)
}

##
This is all good and well, but if we want to have true encryption we need more
Specifically we need to make our Cipher trait generic
  Modern ciphers work on collections of bits, not characters
The change is simple, just introduce a generic contract to the binding
##
let Cipher[T] = {
	def encode :: (T*) -> T*			# Take a sequence of T's and return such
	def decode :: (T*) -> T*
}

# So how will that modify our Caeser cipher (which does work on characters)
let Caeser :: Cipher[Char] = (shft :: Char) {
	# Here we get the other way of specifying inheritance (the ':: Cipher[Char]')

	def encode = .map(.+ shft)
	def decode = .map(.- shft)
}
